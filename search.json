[
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "2023 Turkish Presidential Election, Part 1: The Table of Six",
    "section": "",
    "text": "As it stands, there are three potential candidates for the coalition: Kemal Kılıçdaroğlu, the leader of the Republican People’s Party (CHP), Ekrem İmamoğlu, the mayor of Istanbul, and Mansur Yavaş, the mayor of Ankara. The other five parties in the coalition seem to be in favor of Kılıçdaroğlu, but IYI Party’s leader Meral Akşener made it clear that she’d rather have İmamoğlu or Yavaş as the candidate, as the two regarded to be more popular than Kılıçdaroğlu.\nIt is quite hard to forecast elections in Turkey, as the polls are often wrong, and the election results are often unexpected. However, let’s try our best to analyze the situation with what we have publicly available. Here are the packages we’ll be using:\n\n# For web scraping\nimport requests\nfrom bs4 import BeautifulSoup as bs\n\n# For data manipulation\nimport pandas as pd\nimport numpy as np\nfrom datetime import datetime\n\nimport matplotlib.pyplot as plt\n# style\nplt.style.use('seaborn-darkgrid')\n\nFor today’s web scraping, we’ll be using the Wikipedia page for the election surveys. I will be greedy and scrape all the tables in the page, and then I’ll filter the ones that are relevant to us. Here’s the code:\n\nlink = \"https://tr.wikipedia.org/wiki/2023_T%C3%BCrkiye_cumhurba%C5%9Fkanl%C4%B1%C4%9F%C4%B1_se%C3%A7imi_i%C3%A7in_yap%C4%B1lan_anketler\"\npage = requests.get(link)\nsoup = bs(page.content, \"html.parser\")\ntables = soup.find_all(\"table\", {\"class\": \"wikitable\"})\n\nNow, we’ll filter the tables that are relevant to us. We’ll be looking for tables that have the following columns:\n\ndf_list = []\ndef get_df(table):\n    rows = table.find_all(\"tr\")\n    # Get the header\n    header = [cell.text.strip() for cell in rows[0].find_all(\"th\")]\n    # Get the data\n    data = []\n    for row in rows:\n        if row.find_all(\"td\"):\n            # td or th\n            d = [cell.text.strip() for cell in row.find_all(recursive=False)]\n            if len(d) != len(header):\n                print(\"Error: \", d)\n                continue\n\n            data.append(d)\n\n    df = pd.DataFrame(data, columns=header)\n    return df\n\nfor table in tables:\n    df_list.append(get_df(table))\n\nError:  ['17–20 Eyl', 'MetroPOLL', '2.119', '42,1', '–', '16,9', '22,5', '12,4[no 1]', '–', '–', '–', '–', '–', '–', '–', '–', '19,6']\nError:  ['24 Şub', 'Polimetre[no 2]', '–', '38,5', '35,1', '9,3', '–', '8,1', '–', '–', '–', '–', '9,0', '3,4']\nError:  ['8 Eki', 'Polimetre[no 2]', '–', '46,2', '34,7', '9,5', '8,4', '–', '–', '–', '–', '1,2', '11,5']\nError:  ['Haziran', 'ORC', '–', '56,7[no 3]', '27,7', '8,4', '6,5', '–', '–', '–', '0,5', '0,2', '29,0']\n\n\nNow, we have a list of dataframes, and we can concatenate them into one dataframe:\n\n# Filter the dataframes with 7 columns\ndf_list = [df for df in df_list if len(df.columns) == 7]\n\n# merge all dataframes based on \"Tarih\" and \"Anket şirketi\" columns\nfor df in df_list:\n    candidate = df.columns[4].split(\"\\n\")[0]\n    df.columns = df.columns[:3].tolist() + [f'Erdoğan_{candidate}', candidate, f'Kararsız_{candidate}', f'Fark_{candidate}']\nprint(f'Total number of dataframes: {len(df_list)}')\n\nTotal number of dataframes: 19\n\n\nNow, we have a dataframe with all the data we need. Let’s take a look at the first five rows:\n\n# row merge dataframes with the same columns\ntemp = []\nfor df in df_list:\n    if df.columns.to_list() in [df2.columns.to_list() for df2 in temp]:\n        for i in range(len(temp)):\n            if df.columns.to_list() == temp[i].columns.to_list():\n                # df2 = pd.concat([df2, df], axis=0)\n                temp[i] = pd.concat([temp[i], df], axis=0)\n    else:\n        temp.append(df)\n\nprint(f'Total number of dataframes after merging: {len(temp)}')\n\nTotal number of dataframes after merging: 7\n\n\n\nfinal_df = temp[0]\nfor d in temp[1:]:\n    # merge on \"Tarih\", \"Anket şirketi\", \"Örneklem\"\n    final_df = pd.merge(final_df, d, on=[\"Tarih\", \"Anket şirketi\", \"Örneklem\"], how=\"outer\")\n\n\n# function to parse month in Turkish\ndef parse_month_tr(month):\n    list_tr = [\"Ocak\", \"Şubat\", \"Mart\", \"Nisan\", \"Mayıs\", \"Haziran\", \"Temmuz\", \"Ağustos\", \"Eylül\", \"Ekim\", \"Kasım\", \"Aralık\"]\n    return list_tr.index(month) + 1\n\n# tarih means data\ndef parse_tarih(tarih):\n    t = tarih\n    tarih = str(tarih).replace('–', ' ').replace('-', ' ').split()\n    numbers = [int(e) for e in tarih if e.isdigit()]\n    words = [e for e in tarih if not e.isdigit()]\n\n    temp = []\n    if len(words) == 1 and numbers:\n        for j in numbers:\n            temp.append(datetime(2023, parse_month_tr(words[0]), j))\n    elif len(words) == 2:\n        for i,j in zip(words, numbers):\n            temp.append(datetime(2023, parse_month_tr(i), j))\n    elif len(words) == 1 and not numbers:\n        temp.append(datetime(2023, parse_month_tr(words[0]), 1))\n        temp.append(datetime(2023, parse_month_tr(words[0]) % 12 + 1, 1))\n\n    if temp:\n        return temp\n    else:\n        return ['hey', numbers, words, t]\n    \nprint(f'Unparsed dates: {final_df[\"Tarih\"].apply(lambda x: parse_tarih(x)).apply(lambda x: x[0] == \"hey\").sum()}')\n\nfinal_df['Tarih'] = final_df['Tarih'].apply(parse_tarih)\nfinal_df['Başlangıç'] = final_df['Tarih'].apply(lambda x: x[0])\nfinal_df['Bitiş'] = final_df['Tarih'].apply(lambda x: x[-1])\n\n# Orneklem means sample size\ndef parse_orneklem(orneklem):\n    if orneklem == \"–\":\n        return -1\n    orneklem = orneklem.replace('.', '').replace(',', '')\n    if orneklem.isdigit():\n        return int(orneklem)\n    else:\n        return ['hey', orneklem]\n\nfinal_df['Örneklem'] = final_df['Örneklem'].apply(parse_orneklem)\nfinal_df['Anket şirketi'] = final_df['Anket şirketi'].astype('category')\n\n# For now let's drop Gül, İnce, Babacan, and Akşener\ncols_drop = [col for col in final_df.columns if \"Gül\" in col or \"İnce\" in col or \"Akşener\" in col or \"Babacan\" in col] + ['Tarih']\nfinal_df = final_df.drop(cols_drop, axis=1)\n\n# Reorder columns\ncols = ['Başlangıç', 'Bitiş'] + [col for col in final_df.columns if col not in ['Başlangıç', 'Bitiş']]\nfinal_df = final_df[cols]\n\n# drop all rows with NaN values\nfinal_df = final_df.dropna()\n\ndef parse_pct(pct):\n    pct = pct.replace(',', '.')\n    if pct == \"–\":\n        return -1\n    return float(pct)\n\ninfo_col = ['Başlangıç', 'Bitiş', 'Anket şirketi', 'Örneklem']\nnum_cols = [col for col in final_df.columns if col not in info_col]\nfinal_df[num_cols] = final_df[num_cols].applymap(parse_pct)\n\n# Make fark cols negative if Erdoğan has more votes\nfor cand in ['İmamoğlu', 'Yavaş', 'Kılıçdaroğlu']:\n    idx = final_df[final_df[f'Erdoğan_{cand}'] > final_df[cand]].index\n    final_df.loc[idx, f'Fark_{cand}'] = -final_df.loc[idx, f'Fark_{cand}']\n\nfinal_df.head()\n\n# Fixing the years\nreal_year = 2023\nchanged = False\nfor i in final_df.index[1:]:\n    if final_df.loc[i, 'Başlangıç'].month == 12 and changed == False:\n        real_year -= 1\n        changed = True\n    elif final_df.loc[i, 'Başlangıç'].month == 1 and changed == True:\n        changed = False\n\n    final_df.loc[i, 'Başlangıç'] = final_df.loc[i, 'Başlangıç'].replace(year=real_year)\n    final_df.loc[i, 'Bitiş'] = final_df.loc[i, 'Bitiş'].replace(year=real_year)\n    if final_df.loc[i, 'Bitiş'].month < final_df.loc[i, 'Başlangıç'].month:\n        final_df.loc[i, 'Bitiş'] = final_df.loc[i, 'Bitiş'].replace(year=real_year + 1)\n\n\n# sort df with respect to Başlangıç\nfinal_df = final_df.sort_values(by='Başlangıç')\nfark_cols = [col for col in final_df.columns if \"Fark\" in col]\n\n# Scatter plot\nfig, ax = plt.subplots()\nfor col in fark_cols:\n    # plot the points\n    ax.scatter(final_df['Başlangıç'], final_df[col], label=col)\n    # smooth the line\n    ax.plot(final_df['Başlangıç'], final_df[col].ewm(alpha=0.1).mean(), label=col + ' (EMA)')\n\n\nfor i in final_df.index:\n\n    y = -20 + np.random.randint(0, 7)\n    ax.axvline(final_df.loc[i, 'Başlangıç'], color='black', alpha=0.2, linestyle='--')\n    ax.annotate(final_df.loc[i, 'Anket şirketi'], (final_df.loc[i, 'Başlangıç'], y), (0, 20), textcoords='offset points', va='bottom', ha='center', fontsize=8, rotation=90)\n\n\n# annotate source wikipedia\nax.annotate('Kaynak: Vikipedi - 2023 Türkiye cumhurbaşkanlığı seçimi için yapılan anketler', (0,0), (0, -50), xycoords='axes fraction', textcoords='offset points', va='top', fontsize=12)\nax.annotate('Toplam Anket sayısı: ' + str(len(final_df)), (0,0), (0, -70), xycoords='axes fraction', textcoords='offset points', va='top', fontsize=12)\nax.legend()\n# tight layout\nplt.tight_layout()\nplt.show()\n\n# save the plot\nfig.savefig('anketler.png', dpi=300, bbox_inches='tight')\n\nUnparsed dates: 0"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "Since this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Cem Sirin",
    "section": "",
    "text": "2023 Turkish Presidential Election, Part 1: The Table of Six\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nMar 4, 2023\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nFeb 1, 2023\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Sapienza University of Rome | Rome, IT\nMSc in Data Science | Sept 2021 - Present \nErasmus University Rotterdam | Rotterdam, NL\nDouble BSc in Economics and Econometrics | Sept 2018 - June 2022\nRobert College | Istanbul, TR\nHigh School Diploma | Sept 2014 - June 2018"
  },
  {
    "objectID": "about.html#education",
    "href": "about.html#education",
    "title": "About",
    "section": "Education",
    "text": "Education\nSapienza University of Rome | Rome, IT\nMSc in Data Science | Sept 2021 - Present \nErasmus University Rotterdam | Rotterdam, NL\nDouble BSc in Economics and Econometrics | Sept 2018 - June 2022\nRobert College | Istanbul, TR\nHigh School Diploma | Sept 2014 - June 2018"
  },
  {
    "objectID": "about.html#experience",
    "href": "about.html#experience",
    "title": "About",
    "section": "Experience",
    "text": "Experience\nErasmus School of Economics | Rotterdam, NL\nTeaching Assistant | September 2021 - June 2022"
  },
  {
    "objectID": "posts/secimler1/index.html",
    "href": "posts/secimler1/index.html",
    "title": "2023 Turkish Presidential Election, Part 1: The Table of Six",
    "section": "",
    "text": "As it stands, there are three potential candidates for the coalition: Kemal Kılıçdaroğlu, the leader of the Republican People’s Party (CHP), Ekrem İmamoğlu, the mayor of Istanbul, and Mansur Yavaş, the mayor of Ankara. The other five parties in the coalition seem to be in favor of Kılıçdaroğlu, but IYI Party’s leader Meral Akşener made it clear that she’d rather have İmamoğlu or Yavaş as the candidate, as the two regarded to be more popular than Kılıçdaroğlu.\nIt is quite hard to forecast elections in Turkey, as the polls are often wrong, and the election results are often unexpected. However, let’s try our best to analyze the situation with what we have publicly available. Here, I am uploading the data I have scraped from Wikipedia, you can find the code here.\n\n# Packages\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n# Style\nplt.style.use('seaborn-darkgrid')\n# Read the data\nfinal_df = pd.read_pickle('polls.pkl')\n\n# Fark meaning difference, we are only interested in the difference between candidates and the incumbent (Erdoğan)\nfark_cols = [col for col in final_df.columns if \"Fark\" in col]\n\n# Scatter plot\nfig, ax = plt.subplots(figsize=(20, 10))\nfor col in fark_cols:\n    # plot the points\n    ax.scatter(final_df['Başlangıç'], final_df[col], label=col)\n    # smooth the line with exponential moving average\n    ax.plot(final_df['Başlangıç'], final_df[col].ewm(alpha=0.1).mean(), label=col + ' (EMA)')\n\n\nfor i in final_df.index:\n    y = -20 + np.random.randint(0, 7)\n    ax.axvline(final_df.loc[i, 'Başlangıç'], color='black', alpha=0.2, linestyle='--')\n    ax.annotate(final_df.loc[i, 'Anket şirketi'], (final_df.loc[i, 'Başlangıç'], y), (0, 20), textcoords='offset points', va='bottom', ha='center', fontsize=8, rotation=90)\n\n\n# annotate source wikipedia\nax.annotate('Source: Wikipedia - Opinion polling for the 2023 Turkish presidential election', (0,0), (0, -50), xycoords='axes fraction', textcoords='offset points', va='top', fontsize=12)\nax.annotate('#Polls: ' + str(len(final_df)), (0,0), (0, -70), xycoords='axes fraction', textcoords='offset points', va='top', fontsize=12)\nax.legend()\nplt.show()"
  }
]